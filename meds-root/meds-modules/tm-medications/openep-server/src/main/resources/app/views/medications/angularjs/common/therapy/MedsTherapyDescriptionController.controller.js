/**
 * The meds-therapy-description controller implementation. Provides the view with the correct status classes, based
 * on the provided therapy's state.
 */
(function()
{
  'use strict';
  angular.module('app.views.medications.angularjs.common.therapy')
      .controller('app.views.medications.angularjs.common.therapy.MedsTherapyDescriptionController',
          ['app.views.medications.angularjs.common.therapy.TherapyStatusEnum', MedsTherapyDescriptionController]);

  /**
   * @constructor
   * @param {app.views.medications.angularjs.common.therapy.TherapyStatusEnum} therapyStatusEnum
   * @constructor
   */
  function MedsTherapyDescriptionController(therapyStatusEnum)
  {
    var vm = this;

    vm.getStatusClass = getStatusClass;
    vm.getFormattedDescription = getFormattedDescription;
    vm.getDto = getDto;

    /**
     * Returns the class name for the therapy's status line marker. The logic is a watered down version of
     * {@link app.views.medications.common.therapy.TherapyContainerDisplayProvider#getStatusClass}.
     * @return {string|undefined}
     */
    function getStatusClass()
    {
      if (!_isTherapyDefined())
      {
        return undefined;
      }

      var status = this._dto.changeType ? this._dto.changeType : this._dto.therapyStatus;
      var therapy = this._dto.therapy;
      var therapyEndTime = therapy.end ? new Date(therapy.end) : undefined;
      // we have no server based 'CurrentTime' provider at this point, so using client's time as is
      var therapyEnded = !!therapyEndTime && therapyEndTime.getTime() <= new Date().getTime();

      var statusClassNames = [];

      if (this._dto.hasOwnProperty('active') && this._dto.active !== true) // DayTherapy
      {
        statusClassNames.push('inactive');
      }
      if (angular.isArray(this._dto.additionalWarnings) && this._dto.additionalWarnings.length)
      {
        statusClassNames.push('additional-warning')
      }

      if ([therapyStatusEnum.ABORTED, therapyStatusEnum.CANCELLED].indexOf(status) > -1)
      {
        statusClassNames.push('aborted');
      }
      else if (status === therapyStatusEnum.SUSPENDED)
      {
        statusClassNames.push('suspended')
      }
      else if (this._dto.modifiedFromLastReview === true && !therapyEnded)
      {
        statusClassNames.push('changed')
      }

      statusClassNames.push(therapyEnded ? 'ended' : 'normal');

      return statusClassNames.join(' ');
    }

    /**
     * @return {object|undefined} the active DTO object used for the description.
     */
    function getDto()
    {
      return vm._dto;
    }

    /**
     * @return {string|null} returns the HTML code for the therapy's short description, generated by the backend.
     */
    function getFormattedDescription()
    {
      return _isTherapyDefined() ? vm._dto.therapy.formattedTherapyDisplay : undefined;
    }

    /* Private methods */

    /**
     * @return {boolean} true, if the therapy object on our input dto is set, otherwise false.
     * @private
     */
    function _isTherapyDefined()
    {
      return angular.isObject(vm._dto) && angular.isObject(vm._dto.therapy);
    }
  }
})();
